// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.0
// source: verify.proto

package proto_verify

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommitteeService_RequestCommittee_FullMethodName = "/committee.CommitteeService/RequestCommittee"
)

// CommitteeServiceClient is the client API for CommitteeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommitteeServiceClient interface {
	// 커미티 구성 (합의노드 --> 서버 요청)
	RequestCommittee(ctx context.Context, in *CommitteeRequest, opts ...grpc.CallOption) (*CommitteeInfo, error)
}

type committeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitteeServiceClient(cc grpc.ClientConnInterface) CommitteeServiceClient {
	return &committeeServiceClient{cc}
}

func (c *committeeServiceClient) RequestCommittee(ctx context.Context, in *CommitteeRequest, opts ...grpc.CallOption) (*CommitteeInfo, error) {
	out := new(CommitteeInfo)
	err := c.cc.Invoke(ctx, CommitteeService_RequestCommittee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitteeServiceServer is the server API for CommitteeService service.
// All implementations must embed UnimplementedCommitteeServiceServer
// for forward compatibility
type CommitteeServiceServer interface {
	// 커미티 구성 (합의노드 --> 서버 요청)
	RequestCommittee(context.Context, *CommitteeRequest) (*CommitteeInfo, error)
	mustEmbedUnimplementedCommitteeServiceServer()
}

// UnimplementedCommitteeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommitteeServiceServer struct {
}

func (UnimplementedCommitteeServiceServer) RequestCommittee(context.Context, *CommitteeRequest) (*CommitteeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCommittee not implemented")
}
func (UnimplementedCommitteeServiceServer) mustEmbedUnimplementedCommitteeServiceServer() {}

// UnsafeCommitteeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommitteeServiceServer will
// result in compilation errors.
type UnsafeCommitteeServiceServer interface {
	mustEmbedUnimplementedCommitteeServiceServer()
}

func RegisterCommitteeServiceServer(s grpc.ServiceRegistrar, srv CommitteeServiceServer) {
	s.RegisterService(&CommitteeService_ServiceDesc, srv)
}

func _CommitteeService_RequestCommittee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitteeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitteeServiceServer).RequestCommittee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommitteeService_RequestCommittee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitteeServiceServer).RequestCommittee(ctx, req.(*CommitteeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommitteeService_ServiceDesc is the grpc.ServiceDesc for CommitteeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommitteeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "committee.CommitteeService",
	HandlerType: (*CommitteeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestCommittee",
			Handler:    _CommitteeService_RequestCommittee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "verify.proto",
}
